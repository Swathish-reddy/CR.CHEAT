import numpy as np

def mod26_inv(matrix):
    # Compute matrix inverse mod 26
    det = int(round(np.linalg.det(matrix)))  # determinant
    det = det % 26

    # Find modular inverse of determinant mod 26
    det_inv = None
    for i in range(1, 26):
        if (det * i) % 26 == 1:
            det_inv = i
            break
    if det_inv is None:
        raise ValueError("Matrix determinant has no inverse modulo 26, can't decrypt.")

    # Compute adjugate matrix
    adj = np.array([[matrix[1,1], -matrix[0,1]],
                    [-matrix[1,0], matrix[0,0]]])

    adj = adj % 26

    inv_matrix = (det_inv * adj) % 26
    return inv_matrix

def text_to_numbers(text):
    text = text.upper().replace(" ", "")
    text = ''.join(filter(str.isalpha, text))  # remove non-alpha
    return [ord(c) - ord('A') for c in text]

def numbers_to_text(numbers):
    return ''.join(chr(n + ord('A')) for n in numbers)

def hill_encrypt(plaintext, key_matrix):
    nums = text_to_numbers(plaintext)
    # If length is odd, pad with 'X' (23)
    if len(nums) % 2 != 0:
        nums.append(ord('X') - ord('A'))

    ciphertext_nums = []
    for i in range(0, len(nums), 2):
        pair = np.array([[nums[i]], [nums[i+1]]])
        encrypted_pair = np.dot(key_matrix, pair) % 26
        ciphertext_nums.extend(encrypted_pair.flatten())
    return numbers_to_text(ciphertext_nums)

def hill_decrypt(ciphertext, inv_key_matrix):
    nums = text_to_numbers(ciphertext)
    plaintext_nums = []
    for i in range(0, len(nums), 2):
        pair = np.array([[nums[i]], [nums[i+1]]])
        decrypted_pair = np.dot(inv_key_matrix, pair) % 26
        plaintext_nums.extend(decrypted_pair.flatten())
    return numbers_to_text(plaintext_nums)

# === MAIN ===

plaintext = "meet me at the usual place at ten rather than eight oclock"
key_matrix = np.array([[9, 4],
                       [5, 7]])

print("Plaintext:", plaintext)

# Encrypt
ciphertext = hill_encrypt(plaintext, key_matrix)
print("Ciphertext:", ciphertext)

# Compute inverse key matrix
inv_key_matrix = mod26_inv(key_matrix)

# Decrypt
decrypted_text = hill_decrypt(ciphertext, inv_key_matrix)
print("Decrypted Text:", decrypted_text)
