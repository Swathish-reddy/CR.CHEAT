from math import gcd

def mod_inverse(a, m):
    # Extended Euclidean Algorithm for modular inverse
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

def affine_encrypt(text, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("Key 'a' must be coprime with 26.")

    result = ''
    for char in text.upper():
        if char.isalpha():
            p = ord(char) - ord('A')
            c = (a * p + b) % 26
            result += chr(c + ord('A'))
        else:
            result += char
    return result

def affine_decrypt(cipher, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("Key 'a' must be coprime with 26.")

    a_inv = mod_inverse(a, 26)
    if a_inv is None:
        raise ValueError("Modular inverse for 'a' doesn't exist.")

    result = ''
    for char in cipher.upper():
        if char.isalpha():
            c = ord(char) - ord('A')
            p = (a_inv * (c - b)) % 26
            result += chr(p + ord('A'))
        else:
            result += char
    return result

# === MAIN ===
a = int(input("Enter value of a (must be coprime with 26): "))
b = int(input("Enter value of b (any integer from 0 to 25): "))
plaintext = input("Enter plaintext: ")

try:
    encrypted = affine_encrypt(plaintext, a, b)
    print("\nEncrypted Text:", encrypted)

    decrypted = affine_decrypt(encrypted, a, b)
    print("Decrypted Text:", decrypted)
except ValueError as ve:
    print("Error:", ve)
