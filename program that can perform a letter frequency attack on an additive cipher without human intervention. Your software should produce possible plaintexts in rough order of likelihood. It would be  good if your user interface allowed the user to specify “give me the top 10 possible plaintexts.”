from collections import Counter

# Typical English letter frequencies (in percentage)
ENGLISH_FREQ = {
    'A': 8.167, 'B': 1.492, 'C': 2.782, 'D': 4.253, 'E': 12.702, 'F': 2.228,
    'G': 2.015, 'H': 6.094, 'I': 6.966, 'J': 0.153, 'K': 0.772, 'L': 4.025,
    'M': 2.406, 'N': 6.749, 'O': 7.507, 'P': 1.929, 'Q': 0.095, 'R': 5.987,
    'S': 6.327, 'T': 9.056, 'U': 2.758, 'V': 0.978, 'W': 2.360, 'X': 0.150,
    'Y': 1.974, 'Z': 0.074
}

def caesar_decrypt(ciphertext, shift):
    result = []
    for c in ciphertext:
        if c.isalpha():
            offset = ord('A') if c.isupper() else ord('a')
            dec_char = chr((ord(c) - offset - shift) % 26 + offset)
            result.append(dec_char)
        else:
            result.append(c)
    return ''.join(result)

def score_text(text):
    # Count letters in text, uppercase
    text = text.upper()
    counts = Counter(c for c in text if c.isalpha())
    total_letters = sum(counts.values())
    if total_letters == 0:
        return float('-inf')  # no letters

    # Calculate Chi-squared statistic or sum of absolute frequency diffs
    score = 0
    for letter in ENGLISH_FREQ:
        observed_freq = (counts[letter] / total_letters) * 100 if total_letters > 0 else 0
        expected_freq = ENGLISH_FREQ[letter]
        score += abs(observed_freq - expected_freq)
    # Lower score means closer to English freq
    return -score

def frequency_attack(ciphertext, top_n=10):
    candidates = []
    for shift in range(26):
        plaintext_candidate = caesar_decrypt(ciphertext, shift)
        candidate_score = score_text(plaintext_candidate)
        candidates.append((candidate_score, shift, plaintext_candidate))
    # Sort candidates by score descending (more negative score means better)
    candidates.sort(reverse=True)
    return candidates[:top_n]

# === User interface ===

def main():
    ciphertext = input("Enter the ciphertext: ")
    top_n = input("How many top candidates do you want? (default 10): ")
    try:
        top_n = int(top_n)
    except ValueError:
        top_n = 10

    results = frequency_attack(ciphertext, top_n)

    print(f"\nTop {top_n} possible plaintexts (shift and score):\n")
    for rank, (score, shift, plaintext) in enumerate(results, 1):
        print(f"{rank}. Shift={shift:2} | Score={-score:.2f} | Plaintext: {plaintext}")

if __name__ == "__main__":
    main()
