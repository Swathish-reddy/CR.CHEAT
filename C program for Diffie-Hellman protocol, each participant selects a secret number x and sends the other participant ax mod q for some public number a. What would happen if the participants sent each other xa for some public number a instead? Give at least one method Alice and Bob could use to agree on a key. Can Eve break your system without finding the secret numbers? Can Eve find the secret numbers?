def mod_exp(base, exp, mod):
    """Efficient modular exponentiation."""
    result = 1
    base %= mod
    while exp > 0:
        if exp & 1:
            result = (result * base) % mod
        base = (base * base) % mod
        exp >>= 1
    return result

def diffie_hellman(q, a, alice_secret, bob_secret):
    # Alice sends A = a^x mod q
    A = mod_exp(a, alice_secret, q)
    # Bob sends B = a^y mod q
    B = mod_exp(a, bob_secret, q)

    # Alice computes shared key K = B^x mod q
    alice_key = mod_exp(B, alice_secret, q)
    # Bob computes shared key K = A^y mod q
    bob_key = mod_exp(A, bob_secret, q)

    return A, B, alice_key, bob_key

def wrong_diffie_hellman(q, a, alice_secret, bob_secret):
    # Alice sends A = x^a mod q (wrong)
    A = mod_exp(alice_secret, a, q)
    # Bob sends B = y^a mod q (wrong)
    B = mod_exp(bob_secret, a, q)

    # Trying to compute shared key (impossible in general)
    alice_key = mod_exp(B, alice_secret, q)  # Not symmetric
    bob_key = mod_exp(A, bob_secret, q)

    return A, B, alice_key, bob_key

def main():
    # Public parameters (small primes for demonstration; real q must be large!)
    q = 23  # prime modulus
    a = 5   # primitive root modulo q

    # Secret keys (chosen by Alice and Bob)
    alice_secret = 6
    bob_secret = 15

    print("=== Correct Diffie-Hellman ===")
    A, B, alice_key, bob_key = diffie_hellman(q, a, alice_secret, bob_secret)
    print(f"Alice sends: {A}")
    print(f"Bob sends: {B}")
    print(f"Alice's computed key: {alice_key}")
    print(f"Bob's computed key: {bob_key}")
    print(f"Shared key match: {alice_key == bob_key}")

    print("\n=== Wrong protocol: sending x^a instead of a^x ===")
    A_wrong, B_wrong, alice_key_wrong, bob_key_wrong = wrong_diffie_hellman(q, a, alice_secret, bob_secret)
    print(f"Alice sends (wrong): {A_wrong}")
    print(f"Bob sends (wrong): {B_wrong}")
    print(f"Alice's computed key (wrong): {alice_key_wrong}")
    print(f"Bob's computed key (wrong): {bob_key_wrong}")
    print(f"Shared key match (wrong): {alice_key_wrong == bob_key_wrong}")

if __name__ == "__main__":
    main()
